********************************************************Time complexity of O(n2)************************************************************************************

class Solution {
public:
    int height(TreeNode* root) {
        //base case
        if(root == NULL)
            return 0;
        
        int leftHeight = height(root->left);
        int rightHeight = height(root->right);
        int ans = 1 + max(leftHeight, rightHeight);
        return ans;
    }
    bool isBalanced(TreeNode* root) {
        //Base case
        if(root == NULL)
            return true;

        //1 case
        int leftHeight = height(root->left);
        int rightHeight = height(root->right);
        int diff = abs(leftHeight - rightHeight);

        bool ans1 = (diff <= 1);

        //Recursion
        bool leftAns = isBalanced(root->left);
        bool rightAns = isBalanced(root->right);

        if(ans1 && leftAns && rightAns)
            return true;
        else
            return false;
    }
};

*****************************************************************************O(n)**************************************************************************************

class Solution {
public:
    pair<bool,int> check(TreeNode* root){
        if(root==NULL){
            pair<bool,int> p= make_pair(true,0);
            return p;
        }
        pair<int,int> left= check(root->left);
        pair<int,int> right= check(root->right);
        
        bool leftAns= left.first;
        bool rightAns= right.first;
        
        bool diff= abs(left.second - right.second) <=1;
        
        pair<bool,int>ans;
       
        ans.second= max(left.second, right.second) +1;
        
        if(leftAns && rightAns && diff){
            ans.first = true;
        }
        else{
            ans.first= false;
        }
        return ans;
    }
    bool isBalanced(TreeNode* root) {
        return check(root).first;
    }
};


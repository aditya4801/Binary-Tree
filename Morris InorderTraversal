Approach:

We'll take current node=root and a prev 

case 1: if curr->left==NULL then we'll move curr= curr->right;
case 2: curr->!=NULL then we'll find the right most elem of the left node of curr and connect it with the curr node
then we'll print the value of nodes by moving curr to its right and disconnecting it with curr

vector < int > inorderTraversal(node * root) {
  vector < int > inorder;

  node * cur = root;
  
  // step 1 if left is null move the curr to right after printing the node's data
  while (cur != NULL) {
    if (cur -> left == NULL) {
      inorder.push_back(cur -> data);
      cur = cur -> right;
    }
  
  //if left exists then find the right most part of the left and connect it to the curr
    else {
      node * prev = cur -> left;
      while (prev -> right != NULL && prev -> right != cur) {
        prev = prev -> right;
      }
      if (prev -> right == NULL) {
        prev -> right = cur;
        cur = cur -> left;
      }
  // if the node is visited and we want to disconnect the prev to curr
      else {
        prev -> right = NULL;
        inorder.push_back(cur -> data);
        cur = cur -> right;
      }
    }
  }
  return inorder;
}

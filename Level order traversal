class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
         if(root==NULL)
           return {};
           
           queue<TreeNode*> q;
           
           vector<vector<int>>ans;
           
           while(!q.empty()){
             
             vector<int>v;
             int size= q.size();
             
             for(int i=0; i<size; i++){
             
             TreeNode* temp= q.front();
             q.pop();
             
             v.push_back(temp);
             
             if(temp-> left)
             q.push(temp->left);
             
             if(temp->right)
             q.push(temp->right);
             
             }
           ans.push_back(v);      
           }
           return ans;
    }
};



********************************************************************************OR****************************************************************************************

void levelOrderTraversal(Node* root){
 queue<node>q;
  q.push(root);
  q.push(NULL);
    while(!q.empty()){
    Node* temp= q.front();
    q.pop();
      if(temp==NULL)
       cout<<endl;
       
       if(!q.empty()){
        q.push(NULL);
       }
    }
    else{
       cout<< temp->data<<" ";
       if(temp->left){
         q.push(temp->left);
       }
       if(temp->right){
         q.push(temp->right);
       }
    }
}

pair<bool,int>isSumTreeFast(Node* node){
//base case

if(root==NULL{
pair<bool,int>p=make_pair(true,0);
return p;
}

if(root->left==NULL && root->right==NULL){

pair<bool,int>p= make_pair(true, root->data);

return p;
  }

pair<int,int>leftAns= isSumTreeFast(root->left);
pair<int,int>rightAns= isSumTreeFast(root->right);

bool left= leftAns.first;
bool rigtt= rightAns.first;

bool condn= root->data== leftAns.second + rightAns.second;
 
 pair<bool,int>ans;
 
 if(left && right && condn){
 
 ans.first=true;
 ans.second= 2* root->data;
 }
 else{
 ans.first=false;
 }
 
 return ans;
}

bool isSumTree(Node* root){ 

 return isSumTreeFast(root).first;
}

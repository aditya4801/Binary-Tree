//Brute force approach

class solution{
public: 
 
 int findPosition(int in[], int element, int n){
 for(int i=0; i<n; i++){
  if(in[i]==element)
   return i;
  }
  return -1;
 }
 
 Node* solve(int in[], int pre[], int &index, int inorderStart, int inorderEnd, int n){
 //base case
  if(index>=n || inorderStart > inorderEnd){
  return NULL;
  }  
  //making of root element
    int elements= pre[index++];
    Node* root= new Node(element);
    int position= findPosition(in, element,n);
    
    //recursive calls
    
    root->left= solve(in, pre, index, inorderStart, position-1, n);
    root->right= solve(in, pre, index, position+1, inorderEnd, n);
    return root;
 }
 
 Node* buildTree(int in[], int pre[], int n){
 int preOrderIndex=0;
 Node* ans= solve(in, pre, preOrderIndex, 0, n-1);
  return ans;
  }
};


//Optimized approach by creating map of nodes ans its index from pre

void createMapping(int in[], ,map<int,int>&nodeToIndex, int n){
for(int i=0; i<n; i++){
nodeToIndex[in[i]]=i;
   }
 }
 Node* solve(int in[], int pre[], int &index, int inorderStart, int inorderEnd, nodeToIndex){
 //base case
  if(index>=n || inorderStart > inorderEnd){
  return NULL;
  }  
  //making of root element
    int elements= pre[index++];
    Node* root= new Node(element);
    int position= nodeToIndex(element);
    
    //recursive calls
    
    root->left= solve(in, pre, index, inorderStart, position-1, nodeToIndex);
    root->right= solve(in, pre, index, position+1, inorderEnd, nodeToIndex);
    return root;
 }
 
 Node* buildTree(int in[], int pre[], int n){
 int preOrderIndex=0;
 map<int,int> nodeToIndex;
 createMapping(in, nodeToIndex, n);
 Node* ans= solve(in, pre, preOrderIndex, 0, n-1);
  return ans;
  }
 

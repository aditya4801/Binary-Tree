//Brute force approach

//finding height along with the left and right subtree's length and finding the max among them

class solution{
private:

int height(struct Node* node){                   O(n)--------------->

//base case

if(node==NULL){

return 0;
                                                                                        O(N^2)  Total time complexity
return max( height(root->left), height(root->right))+1;
  } 
};

public:
 
int diameter(Node* root){                          O(n)------------->
if(root==NULL){
return 0;
  }
  
  int op1= diameter->left;
  int op2= diameter->right;
  int op3= height(root->left) + height(root->right) + 1;
  
  int ans= max( op1 , max(op2,op3));
  
  return ans;
}

//Optimized approach
 
pair<int,int>diameterFast(Node* root){
 
if(root==NULL){
  pair<int,int>p=make_pair(0,0);
    return p;
  }
  
  pair<int,int>left= diameterFast(root->left);
  pair<int,int>right= diameterFast(root->right);
  
    int op1= left.first;
    int op2= right.first;
    int op3= left.second + right.second +1;
    
    pair<int,int>ans;
    
    ans.first= max(op1,max(op2,op3));;
    ans.second= max(left.second, right.second) +1;
    
    return ans;
 }
 
 int diameter(Node* root){
 
 return diameterFast(root).first;
 }
